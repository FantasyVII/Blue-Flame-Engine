vertexShader = R"(
#version 450 core
layout(location = 0) in vec3 inPosition;

layout (std140, binding = 0) uniform Camera
{
	mat4 modelMatrix;
	mat4 viewMatrix;
	mat4 projectionMatrix;
	vec4 position;
} camera;

void main()
{
	vec4 worldSpace = camera.modelMatrix * vec4(inPosition.xyz, 1.0f);
	gl_Position = camera.projectionMatrix * camera.viewMatrix * worldSpace;
}
)";

pixelShader = R"(
#version 450 core

/*struct Material
{
	vec4 ambientColor;
	vec4 diffuseColor;
	vec4 specularColor;

	float shininess;
};*/

layout (std140, binding = 1) uniform Material
{
	vec4 ambientColor;
	vec4 diffuseColor;
	vec4 specularColor;

	float shininess;
} material;

out vec4 color;

void main() 
{
	color = material.ambientColor * material.diffuseColor * material.specularColor;
	//color = vec4(1.0, 0, 0, 1.0);
}
)";