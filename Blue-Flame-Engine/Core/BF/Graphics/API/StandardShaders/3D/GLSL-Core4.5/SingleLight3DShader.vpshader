vertexShader = R"(
#version 450 core
layout(location = 0) in vec3 inPosition;
//layout(location = 1) in vec4 inColor;
layout(location = 1) in vec2 inUV;
layout(location = 2) in vec3 inNormal;
layout(location = 3) in vec3 inTangent;
layout(location = 4) in vec3 inBitangent;x

layout (std140, binding = 0) uniform camera_data
{
	mat4 buffer_modelMatrix;
	mat4 buffer_viewMatrix;
	mat4 buffer_projectionMatrix;
	vec4 cameraPos;
};

out struct data
{
	vec4 fragmentColor;
	vec2 UV;
	vec3 normals;
	vec3 pixelPosition;
	vec3 cameraPos;
	vec3 cubeMapTexCoords;
	mat3 TBN;
	vec3 Tangent;
	vec3 Bitangent;
} shared_data;

void main()
{
	vec4 worldSpace = buffer_modelMatrix * vec4(inPosition.xyz, 1.0f);
	gl_Position = buffer_projectionMatrix * buffer_viewMatrix * worldSpace;

	//shared_data.fragmentColor = inColor;
	shared_data.UV = inUV;

	vec3 T = normalize(vec3(buffer_modelMatrix * vec4(inTangent,   0.0)));
	vec3 B = normalize(vec3(buffer_modelMatrix * vec4(inBitangent, 0.0)));
	vec3 N = normalize(vec3(buffer_modelMatrix * vec4(inNormal,    0.0)));
	//shared_data.TBN = mat3(B, T, N);
	shared_data.TBN = mat3(T, B, N);
	shared_data.Tangent = inTangent;
	shared_data.Bitangent = inBitangent;

	//Should be done on the CPU side. But it's fine for now.
	shared_data.normals = mat3(transpose(inverse(buffer_modelMatrix))) * inNormal;
	shared_data.pixelPosition = worldSpace.xyz;
	shared_data.cameraPos = cameraPos.xyz;

	shared_data.cubeMapTexCoords = inPosition;
}
)";

pixelShader = R"(
#version 450 core

struct Light
{
	vec4 posDir;
	
	vec4 ambientColor;
	vec4 diffuseColor;
	vec4 specularColor;
};

struct PointLight
{
	vec4 posDir;
	
	vec4 ambientColor;
	vec4 diffuseColor;
	vec4 specularColor;

	float constant;
	float linear;
	float quadratic;
};

struct Material
{
	vec4 ambientColor;
	vec4 diffuseColor;
	vec4 specularColor;
	float shininess;
};

layout (std140, binding = 1) uniform LightUniform
{
	PointLight light;
};

layout (std140, binding = 2) uniform MaterialUniform
{
	Material material;
};

in struct data
{
	vec4 fragmentColor;
	vec2 UV;
	vec3 normals;
	vec3 pixelPosition;
	vec3 cameraPos;
	vec3 cubeMapTexCoords;
	mat3 TBN;
	vec3 Tangent;
	vec3 Bitangent;
} shared_data;

out vec4 color;

uniform sampler2D diffuseMap;
uniform sampler2D specularMap;
uniform sampler2D normalMap;

uniform samplerCube skybox;

vec3 finalColor;

vec3 CalculateDirectionalLight(Light light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.posDir.xyz);

    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);

    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    // Combine results
    vec4 ambient  = light.ambientColor         * material.ambientColor  * texture(diffuseMap, shared_data.UV);
    vec4 diffuse  = light.diffuseColor  * diff * material.diffuseColor  * texture(diffuseMap, shared_data.UV);
    vec4 specular = light.specularColor * spec * material.specularColor * texture(specularMap, shared_data.UV);

    return (ambient + diffuse + specular).rgb;
}  

vec3 CalculateInfiniteLight(PointLight light, vec3 normal, vec3 viewDir)
{
	vec3 lightDirection = normalize(light.posDir.xyz - shared_data.pixelPosition);
	//vec3 lightDirection = shared_data.TBN * normalize(light.posDir.xyz - shared_data.pixelPosition);

	// Diffuse shading
	float diff = max(0.0f, dot(lightDirection, normal));

	// Specular shading
	vec3 reflectDir = reflect(-lightDirection, normal);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
	// Attenuation
    float distance    = length(light.posDir.xyz - shared_data.pixelPosition);
    float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    

	// Combine results
	vec4 ambient  = light.ambientColor 		   * material.ambientColor  /** texture(diffuseMap, shared_data.UV)*/ * attenuation;
	vec4 diffuse  = light.diffuseColor  * diff * material.diffuseColor  /** texture(diffuseMap, shared_data.UV)*/ * attenuation;
	vec4 specular = light.specularColor * spec * material.specularColor /** texture(specularMap, shared_data.UV)*/ * attenuation;

	return (ambient + diffuse + specular).rgb;
}  

void main() 
{
	//Normal Map
	//vec3 normal = texture(normalMap, shared_data.UV).rgb;
	//normal = normalize(normal * 2.0 - 1.0);   
	//normal = normalize(shared_data.TBN * normal); 

    //vec3 viewDir  = /*shared_data.TBN **/ normalize(shared_data.cameraPos - shared_data.pixelPosition);  

	//Vertex Normals
	vec3 normal = normalize(shared_data.normals);
	vec3 viewDir  = normalize(shared_data.cameraPos - shared_data.pixelPosition);  

	//vec3 finalColor = CalculateDirectionalLight(light, normal, viewDir);

	finalColor = CalculateInfiniteLight(light, normal, viewDir); 

	color = vec4(finalColor, 1.0f);

	//vec3 I = normalize(shared_data.pixelPosition - shared_data.cameraPos);
    //vec3 R = reflect(I, normalize(shared_data.normals));
    //color = texture(skybox, R);

	//color = vec4(normal, 1.0f);
	//color = vec4(texture(skybox, shared_data.cubeMapTexCoords));
}
)";