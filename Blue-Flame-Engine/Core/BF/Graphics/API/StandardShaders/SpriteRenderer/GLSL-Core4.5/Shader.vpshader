vertexShader = R"(
#version 450 core
layout(location = 0) in vec2 inPosition;
layout(location = 1) in vec4 inColor;
layout(location = 2) in vec2 inUV;
layout(location = 3) in float inRenderingType;

out vec4 psColor;
out vec2 psUV;
out float psRenderingType;

layout (std140, binding = 0) uniform Camera
{
	mat4 modelMatrix;
	mat4 viewMatrix;
	mat4 projectionMatrix;
	vec4 position;
} camera;

void main()
{
	gl_Position = camera.projectionMatrix * camera.viewMatrix * vec4(inPosition.xy, 0.0f, 1.0f);

	psColor = inColor;
	psUV = inUV;
	psRenderingType = inRenderingType;
}
)";

pixelShader = R"(
#version 450 core

in vec4 psColor;
in vec2 psUV;
in float psRenderingType;

out vec4 color;

uniform sampler2D textures;

void main() 
{
	int rt = int(psRenderingType);

	if(rt == 0)
		color = psColor;
	else if(rt == 1)
		color = psColor * texture(textures, psUV);
	else if(rt == 2)
		color = psColor * texture(textures, psUV).r;
}
)";